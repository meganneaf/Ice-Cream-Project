#include <iostream>
#include <string>
#include <limits>
#include <regex>
using namespace std;

// Method to get a single digit input between min and max, no decimals or invalid chars allowed
int getSingleDigitInput(const string & prompt, int min, int max) {
    string input;
    int value;

// Input validation loop
    while (true) {
        cout << prompt << endl;
        cin >> input;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        bool neg = input[0] == '-';
        string digits = neg ? input.substr(1) : input;

        if (digits.empty() || !all_of(digits.begin(), digits.end(), ::isdigit) || (digits.size() > 1 && digits[0] == '0')) {
            cout << "Invalid character used. Please enter an integer between " << min << " and " << max << "." << endl;
            continue;
        }

        value = stoi(input);
        if (value >= min && value <= max) return value;

        cout << "Out of range. Please enter an integer between " << min << " and " << max << "." << endl;
    }
}

int main() {
    // Welcome message  
    cout << "Welcome to the Custom Ice Cream Builder!" << endl << endl;

    // Generate ingredient vectors
    string flavors[3] = {"Vanilla", "Chocolate", "Strawberry"};
    string toppings[3] = {"Sprinkles", "Crushed Oreos", "Cherries"};
    string sauces[2] = {"Hot Fudge", "Caramel Sauce"};

    // Flavor selection
    int Flavor = getSingleDigitInput(
        "Select your base ice cream flavor:\n1. Vanilla\n2. Chocolate\n3. Strawberry", 1, 3) - 1;

    // Scoop amount
    int Scoop = getSingleDigitInput("How many scoops? (1-3)", 1, 3);

    // Toppings selection
    int amount = 0; // Tracks the amount of toppings
    string Top[3]; // Final topping output vector
    int choices[3] = {0, 0, 0}; // Tracks the order the toppings were selected in

    // Topping selection loop
    while (amount < 3) {
        int choice = getSingleDigitInput(
            "Select a topping (or 0 to finish):\n1. Sprinkles\n2. Crushed Oreos\n3. Cherries", 0, 3);

        if (choice == 0) break;

        // Check if topping was already selected
        bool alreadySelected = false;
        for (int i = 0; i < amount; i++) {
            if (choices[i] == choice) {
                alreadySelected = true;
                break;
            }
        }
        if (alreadySelected) {
            cout << "You have already selected this option." << endl;
            continue;
        }

        choices[amount] = choice;
        Top[amount] = toppings[choice - 1];

        // Prompt for topping amount based on topping choice
        switch (choice) {
            case 1: { // Sprinkles
                int TbsS = getSingleDigitInput("How many tablespoons? (1-3)", 1, 3);
                Top[amount] += " (" + to_string(TbsS) + (TbsS == 1 ? " Tablespoon)" : " Tablespoons)");
                break;
            }
            case 2: { // Crushed Oreos
                int TbsCO = getSingleDigitInput("How many tablespoons? (1-3)", 1, 3);
                Top[amount] += " (" + to_string(TbsCO) + (TbsCO == 1 ? " Tablespoon)" : " Tablespoons)");
                break;
            }
            case 3: { // Cherries
                int Piece = getSingleDigitInput("How many pieces? (1-5)", 1, 5);
                Top[amount] += " (" + to_string(Piece) + (Piece == 1 ? " Piece)" : " Pieces)");
                break;
            }
        }

        amount++;
    }

    // Sauce selection
    int Sauce = getSingleDigitInput("Select a sauce (1 only):\n1. Hot Fudge\n2. Caramel Sauce", 1, 2) - 1;

    // Spoonful amount
    int Spoonful = getSingleDigitInput("How many spoonfuls? (1-2)", 1, 2);

    // Print final ingredients and assembly instructions
    cout << "\nYour Custom Ice Cream Sundae: " << endl;

    // Base flavor and scoops
    cout << flavors[Flavor] << " (" << Scoop << (Scoop == 1 ? " Scoop)" : " Scoops)") << endl;
    
    // Toppings and corresponding amounts
    for (int i = 0; i < amount; i++) {
        cout << Top[i] << endl;
    }
    // Sauce and spoonfuls
    cout << sauces[Sauce] << " (" << Spoonful << (Spoonful == 1 ? " Spoonful)" : " Spoonfuls)") << endl;

    // Assembling instructions
    if (amount == 0) {
        cout << "\nAssembling Instructions: Layer the base, finish with sauce. Serve immediately!" << endl;
    } else {
        cout << "\nAssembling Instructions: Layer the base, add toppings, finish with sauce. Serve immediately!" << endl;
    }

    return 0;
}
